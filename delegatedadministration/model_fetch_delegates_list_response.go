/*
Saviynt Delegated Administration API

Deglated Administration

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delegatedadministration

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FetchDelegatesListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchDelegatesListResponse{}

// FetchDelegatesListResponse struct for FetchDelegatesListResponse
type FetchDelegatesListResponse struct {
	DelegateList []Delegate `json:"delegateList"`
	Msg string `json:"msg"`
	ErrorCode string `json:"errorCode"`
	TotalCount *string `json:"totalCount,omitempty"`
	DelegateCount *int32 `json:"delegateCount,omitempty"`
}

type _FetchDelegatesListResponse FetchDelegatesListResponse

// NewFetchDelegatesListResponse instantiates a new FetchDelegatesListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchDelegatesListResponse(delegateList []Delegate, msg string, errorCode string) *FetchDelegatesListResponse {
	this := FetchDelegatesListResponse{}
	this.DelegateList = delegateList
	this.Msg = msg
	this.ErrorCode = errorCode
	return &this
}

// NewFetchDelegatesListResponseWithDefaults instantiates a new FetchDelegatesListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchDelegatesListResponseWithDefaults() *FetchDelegatesListResponse {
	this := FetchDelegatesListResponse{}
	return &this
}

// GetDelegateList returns the DelegateList field value
func (o *FetchDelegatesListResponse) GetDelegateList() []Delegate {
	if o == nil {
		var ret []Delegate
		return ret
	}

	return o.DelegateList
}

// GetDelegateListOk returns a tuple with the DelegateList field value
// and a boolean to check if the value has been set.
func (o *FetchDelegatesListResponse) GetDelegateListOk() ([]Delegate, bool) {
	if o == nil {
		return nil, false
	}
	return o.DelegateList, true
}

// SetDelegateList sets field value
func (o *FetchDelegatesListResponse) SetDelegateList(v []Delegate) {
	o.DelegateList = v
}

// GetMsg returns the Msg field value
func (o *FetchDelegatesListResponse) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *FetchDelegatesListResponse) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *FetchDelegatesListResponse) SetMsg(v string) {
	o.Msg = v
}

// GetErrorCode returns the ErrorCode field value
func (o *FetchDelegatesListResponse) GetErrorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *FetchDelegatesListResponse) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *FetchDelegatesListResponse) SetErrorCode(v string) {
	o.ErrorCode = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *FetchDelegatesListResponse) GetTotalCount() string {
	if o == nil || IsNil(o.TotalCount) {
		var ret string
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchDelegatesListResponse) GetTotalCountOk() (*string, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *FetchDelegatesListResponse) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given string and assigns it to the TotalCount field.
func (o *FetchDelegatesListResponse) SetTotalCount(v string) {
	o.TotalCount = &v
}

// GetDelegateCount returns the DelegateCount field value if set, zero value otherwise.
func (o *FetchDelegatesListResponse) GetDelegateCount() int32 {
	if o == nil || IsNil(o.DelegateCount) {
		var ret int32
		return ret
	}
	return *o.DelegateCount
}

// GetDelegateCountOk returns a tuple with the DelegateCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchDelegatesListResponse) GetDelegateCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DelegateCount) {
		return nil, false
	}
	return o.DelegateCount, true
}

// HasDelegateCount returns a boolean if a field has been set.
func (o *FetchDelegatesListResponse) HasDelegateCount() bool {
	if o != nil && !IsNil(o.DelegateCount) {
		return true
	}

	return false
}

// SetDelegateCount gets a reference to the given int32 and assigns it to the DelegateCount field.
func (o *FetchDelegatesListResponse) SetDelegateCount(v int32) {
	o.DelegateCount = &v
}

func (o FetchDelegatesListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchDelegatesListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["delegateList"] = o.DelegateList
	toSerialize["msg"] = o.Msg
	toSerialize["errorCode"] = o.ErrorCode
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	if !IsNil(o.DelegateCount) {
		toSerialize["delegateCount"] = o.DelegateCount
	}
	return toSerialize, nil
}

func (o *FetchDelegatesListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"delegateList",
		"msg",
		"errorCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFetchDelegatesListResponse := _FetchDelegatesListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFetchDelegatesListResponse)

	if err != nil {
		return err
	}

	*o = FetchDelegatesListResponse(varFetchDelegatesListResponse)

	return err
}

type NullableFetchDelegatesListResponse struct {
	value *FetchDelegatesListResponse
	isSet bool
}

func (v NullableFetchDelegatesListResponse) Get() *FetchDelegatesListResponse {
	return v.value
}

func (v *NullableFetchDelegatesListResponse) Set(val *FetchDelegatesListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchDelegatesListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchDelegatesListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchDelegatesListResponse(val *FetchDelegatesListResponse) *NullableFetchDelegatesListResponse {
	return &NullableFetchDelegatesListResponse{value: val, isSet: true}
}

func (v NullableFetchDelegatesListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchDelegatesListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


