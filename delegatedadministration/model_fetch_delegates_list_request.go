/*
Saviynt Delegated Administration API

Deglated Administration

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delegatedadministration

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FetchDelegatesListRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchDelegatesListRequest{}

// FetchDelegatesListRequest struct for FetchDelegatesListRequest
type FetchDelegatesListRequest struct {
	// this is the parentusername
	UserName string `json:"userName"`
	Max *int32 `json:"max,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
	// values can be ACTIVE / INACTIVE
	Status *string `json:"status,omitempty"`
}

type _FetchDelegatesListRequest FetchDelegatesListRequest

// NewFetchDelegatesListRequest instantiates a new FetchDelegatesListRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchDelegatesListRequest(userName string) *FetchDelegatesListRequest {
	this := FetchDelegatesListRequest{}
	this.UserName = userName
	return &this
}

// NewFetchDelegatesListRequestWithDefaults instantiates a new FetchDelegatesListRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchDelegatesListRequestWithDefaults() *FetchDelegatesListRequest {
	this := FetchDelegatesListRequest{}
	return &this
}

// GetUserName returns the UserName field value
func (o *FetchDelegatesListRequest) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *FetchDelegatesListRequest) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *FetchDelegatesListRequest) SetUserName(v string) {
	o.UserName = v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *FetchDelegatesListRequest) GetMax() int32 {
	if o == nil || IsNil(o.Max) {
		var ret int32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchDelegatesListRequest) GetMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *FetchDelegatesListRequest) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given int32 and assigns it to the Max field.
func (o *FetchDelegatesListRequest) SetMax(v int32) {
	o.Max = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *FetchDelegatesListRequest) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchDelegatesListRequest) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *FetchDelegatesListRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *FetchDelegatesListRequest) SetOffset(v int32) {
	o.Offset = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FetchDelegatesListRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchDelegatesListRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FetchDelegatesListRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FetchDelegatesListRequest) SetStatus(v string) {
	o.Status = &v
}

func (o FetchDelegatesListRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchDelegatesListRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userName"] = o.UserName
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *FetchDelegatesListRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFetchDelegatesListRequest := _FetchDelegatesListRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFetchDelegatesListRequest)

	if err != nil {
		return err
	}

	*o = FetchDelegatesListRequest(varFetchDelegatesListRequest)

	return err
}

type NullableFetchDelegatesListRequest struct {
	value *FetchDelegatesListRequest
	isSet bool
}

func (v NullableFetchDelegatesListRequest) Get() *FetchDelegatesListRequest {
	return v.value
}

func (v *NullableFetchDelegatesListRequest) Set(val *FetchDelegatesListRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchDelegatesListRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchDelegatesListRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchDelegatesListRequest(val *FetchDelegatesListRequest) *NullableFetchDelegatesListRequest {
	return &NullableFetchDelegatesListRequest{value: val, isSet: true}
}

func (v NullableFetchDelegatesListRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchDelegatesListRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


