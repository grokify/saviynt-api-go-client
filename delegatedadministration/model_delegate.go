/*
Saviynt Delegated Administration API

Deglated Administration

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delegatedadministration

import (
	"encoding/json"
)

// checks if the Delegate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Delegate{}

// Delegate struct for Delegate
type Delegate struct {
	Delegatekey *string `json:"delegatekey,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Parentusername *string `json:"parentusername,omitempty"`
	ParentFirstName *string `json:"parentFirstName,omitempty"`
	ParentLastName *string `json:"parentLastName,omitempty"`
	DelegateFirstName *string `json:"delegateFirstName,omitempty"`
	DelegateLastName *string `json:"delegateLastName,omitempty"`
	Status *string `json:"status,omitempty"`
	Delegateusername *string `json:"delegateusername,omitempty"`
	// date format 07/14/2020
	Startdate *string `json:"startdate,omitempty"`
	// date with format 07/14/2020
	Enddate *string `json:"enddate,omitempty"`
}

// NewDelegate instantiates a new Delegate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelegate() *Delegate {
	this := Delegate{}
	return &this
}

// NewDelegateWithDefaults instantiates a new Delegate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelegateWithDefaults() *Delegate {
	this := Delegate{}
	return &this
}

// GetDelegatekey returns the Delegatekey field value if set, zero value otherwise.
func (o *Delegate) GetDelegatekey() string {
	if o == nil || IsNil(o.Delegatekey) {
		var ret string
		return ret
	}
	return *o.Delegatekey
}

// GetDelegatekeyOk returns a tuple with the Delegatekey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delegate) GetDelegatekeyOk() (*string, bool) {
	if o == nil || IsNil(o.Delegatekey) {
		return nil, false
	}
	return o.Delegatekey, true
}

// HasDelegatekey returns a boolean if a field has been set.
func (o *Delegate) HasDelegatekey() bool {
	if o != nil && !IsNil(o.Delegatekey) {
		return true
	}

	return false
}

// SetDelegatekey gets a reference to the given string and assigns it to the Delegatekey field.
func (o *Delegate) SetDelegatekey(v string) {
	o.Delegatekey = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Delegate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delegate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Delegate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Delegate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Delegate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delegate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Delegate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Delegate) SetDescription(v string) {
	o.Description = &v
}

// GetParentusername returns the Parentusername field value if set, zero value otherwise.
func (o *Delegate) GetParentusername() string {
	if o == nil || IsNil(o.Parentusername) {
		var ret string
		return ret
	}
	return *o.Parentusername
}

// GetParentusernameOk returns a tuple with the Parentusername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delegate) GetParentusernameOk() (*string, bool) {
	if o == nil || IsNil(o.Parentusername) {
		return nil, false
	}
	return o.Parentusername, true
}

// HasParentusername returns a boolean if a field has been set.
func (o *Delegate) HasParentusername() bool {
	if o != nil && !IsNil(o.Parentusername) {
		return true
	}

	return false
}

// SetParentusername gets a reference to the given string and assigns it to the Parentusername field.
func (o *Delegate) SetParentusername(v string) {
	o.Parentusername = &v
}

// GetParentFirstName returns the ParentFirstName field value if set, zero value otherwise.
func (o *Delegate) GetParentFirstName() string {
	if o == nil || IsNil(o.ParentFirstName) {
		var ret string
		return ret
	}
	return *o.ParentFirstName
}

// GetParentFirstNameOk returns a tuple with the ParentFirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delegate) GetParentFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.ParentFirstName) {
		return nil, false
	}
	return o.ParentFirstName, true
}

// HasParentFirstName returns a boolean if a field has been set.
func (o *Delegate) HasParentFirstName() bool {
	if o != nil && !IsNil(o.ParentFirstName) {
		return true
	}

	return false
}

// SetParentFirstName gets a reference to the given string and assigns it to the ParentFirstName field.
func (o *Delegate) SetParentFirstName(v string) {
	o.ParentFirstName = &v
}

// GetParentLastName returns the ParentLastName field value if set, zero value otherwise.
func (o *Delegate) GetParentLastName() string {
	if o == nil || IsNil(o.ParentLastName) {
		var ret string
		return ret
	}
	return *o.ParentLastName
}

// GetParentLastNameOk returns a tuple with the ParentLastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delegate) GetParentLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.ParentLastName) {
		return nil, false
	}
	return o.ParentLastName, true
}

// HasParentLastName returns a boolean if a field has been set.
func (o *Delegate) HasParentLastName() bool {
	if o != nil && !IsNil(o.ParentLastName) {
		return true
	}

	return false
}

// SetParentLastName gets a reference to the given string and assigns it to the ParentLastName field.
func (o *Delegate) SetParentLastName(v string) {
	o.ParentLastName = &v
}

// GetDelegateFirstName returns the DelegateFirstName field value if set, zero value otherwise.
func (o *Delegate) GetDelegateFirstName() string {
	if o == nil || IsNil(o.DelegateFirstName) {
		var ret string
		return ret
	}
	return *o.DelegateFirstName
}

// GetDelegateFirstNameOk returns a tuple with the DelegateFirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delegate) GetDelegateFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.DelegateFirstName) {
		return nil, false
	}
	return o.DelegateFirstName, true
}

// HasDelegateFirstName returns a boolean if a field has been set.
func (o *Delegate) HasDelegateFirstName() bool {
	if o != nil && !IsNil(o.DelegateFirstName) {
		return true
	}

	return false
}

// SetDelegateFirstName gets a reference to the given string and assigns it to the DelegateFirstName field.
func (o *Delegate) SetDelegateFirstName(v string) {
	o.DelegateFirstName = &v
}

// GetDelegateLastName returns the DelegateLastName field value if set, zero value otherwise.
func (o *Delegate) GetDelegateLastName() string {
	if o == nil || IsNil(o.DelegateLastName) {
		var ret string
		return ret
	}
	return *o.DelegateLastName
}

// GetDelegateLastNameOk returns a tuple with the DelegateLastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delegate) GetDelegateLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.DelegateLastName) {
		return nil, false
	}
	return o.DelegateLastName, true
}

// HasDelegateLastName returns a boolean if a field has been set.
func (o *Delegate) HasDelegateLastName() bool {
	if o != nil && !IsNil(o.DelegateLastName) {
		return true
	}

	return false
}

// SetDelegateLastName gets a reference to the given string and assigns it to the DelegateLastName field.
func (o *Delegate) SetDelegateLastName(v string) {
	o.DelegateLastName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Delegate) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delegate) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Delegate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Delegate) SetStatus(v string) {
	o.Status = &v
}

// GetDelegateusername returns the Delegateusername field value if set, zero value otherwise.
func (o *Delegate) GetDelegateusername() string {
	if o == nil || IsNil(o.Delegateusername) {
		var ret string
		return ret
	}
	return *o.Delegateusername
}

// GetDelegateusernameOk returns a tuple with the Delegateusername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delegate) GetDelegateusernameOk() (*string, bool) {
	if o == nil || IsNil(o.Delegateusername) {
		return nil, false
	}
	return o.Delegateusername, true
}

// HasDelegateusername returns a boolean if a field has been set.
func (o *Delegate) HasDelegateusername() bool {
	if o != nil && !IsNil(o.Delegateusername) {
		return true
	}

	return false
}

// SetDelegateusername gets a reference to the given string and assigns it to the Delegateusername field.
func (o *Delegate) SetDelegateusername(v string) {
	o.Delegateusername = &v
}

// GetStartdate returns the Startdate field value if set, zero value otherwise.
func (o *Delegate) GetStartdate() string {
	if o == nil || IsNil(o.Startdate) {
		var ret string
		return ret
	}
	return *o.Startdate
}

// GetStartdateOk returns a tuple with the Startdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delegate) GetStartdateOk() (*string, bool) {
	if o == nil || IsNil(o.Startdate) {
		return nil, false
	}
	return o.Startdate, true
}

// HasStartdate returns a boolean if a field has been set.
func (o *Delegate) HasStartdate() bool {
	if o != nil && !IsNil(o.Startdate) {
		return true
	}

	return false
}

// SetStartdate gets a reference to the given string and assigns it to the Startdate field.
func (o *Delegate) SetStartdate(v string) {
	o.Startdate = &v
}

// GetEnddate returns the Enddate field value if set, zero value otherwise.
func (o *Delegate) GetEnddate() string {
	if o == nil || IsNil(o.Enddate) {
		var ret string
		return ret
	}
	return *o.Enddate
}

// GetEnddateOk returns a tuple with the Enddate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Delegate) GetEnddateOk() (*string, bool) {
	if o == nil || IsNil(o.Enddate) {
		return nil, false
	}
	return o.Enddate, true
}

// HasEnddate returns a boolean if a field has been set.
func (o *Delegate) HasEnddate() bool {
	if o != nil && !IsNil(o.Enddate) {
		return true
	}

	return false
}

// SetEnddate gets a reference to the given string and assigns it to the Enddate field.
func (o *Delegate) SetEnddate(v string) {
	o.Enddate = &v
}

func (o Delegate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Delegate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Delegatekey) {
		toSerialize["delegatekey"] = o.Delegatekey
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Parentusername) {
		toSerialize["parentusername"] = o.Parentusername
	}
	if !IsNil(o.ParentFirstName) {
		toSerialize["parentFirstName"] = o.ParentFirstName
	}
	if !IsNil(o.ParentLastName) {
		toSerialize["parentLastName"] = o.ParentLastName
	}
	if !IsNil(o.DelegateFirstName) {
		toSerialize["delegateFirstName"] = o.DelegateFirstName
	}
	if !IsNil(o.DelegateLastName) {
		toSerialize["delegateLastName"] = o.DelegateLastName
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Delegateusername) {
		toSerialize["delegateusername"] = o.Delegateusername
	}
	if !IsNil(o.Startdate) {
		toSerialize["startdate"] = o.Startdate
	}
	if !IsNil(o.Enddate) {
		toSerialize["enddate"] = o.Enddate
	}
	return toSerialize, nil
}

type NullableDelegate struct {
	value *Delegate
	isSet bool
}

func (v NullableDelegate) Get() *Delegate {
	return v.value
}

func (v *NullableDelegate) Set(val *Delegate) {
	v.value = val
	v.isSet = true
}

func (v NullableDelegate) IsSet() bool {
	return v.isSet
}

func (v *NullableDelegate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelegate(val *Delegate) *NullableDelegate {
	return &NullableDelegate{value: val, isSet: true}
}

func (v NullableDelegate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelegate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


