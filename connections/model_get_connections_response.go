/*
Saviynt Connections API

Connections

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connections

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetConnectionsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetConnectionsResponse{}

// GetConnectionsResponse struct for GetConnectionsResponse
type GetConnectionsResponse struct {
	ConnectionList []Connection `json:"ConnectionList"`
	ErrorCode string `json:"errorCode"`
	Msg string `json:"msg"`
	DisplayCount *int32 `json:"displayCount,omitempty"`
	TotalCount *int32 `json:"totalCount,omitempty"`
}

type _GetConnectionsResponse GetConnectionsResponse

// NewGetConnectionsResponse instantiates a new GetConnectionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetConnectionsResponse(connectionList []Connection, errorCode string, msg string) *GetConnectionsResponse {
	this := GetConnectionsResponse{}
	this.ConnectionList = connectionList
	this.ErrorCode = errorCode
	this.Msg = msg
	return &this
}

// NewGetConnectionsResponseWithDefaults instantiates a new GetConnectionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetConnectionsResponseWithDefaults() *GetConnectionsResponse {
	this := GetConnectionsResponse{}
	return &this
}

// GetConnectionList returns the ConnectionList field value
func (o *GetConnectionsResponse) GetConnectionList() []Connection {
	if o == nil {
		var ret []Connection
		return ret
	}

	return o.ConnectionList
}

// GetConnectionListOk returns a tuple with the ConnectionList field value
// and a boolean to check if the value has been set.
func (o *GetConnectionsResponse) GetConnectionListOk() ([]Connection, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionList, true
}

// SetConnectionList sets field value
func (o *GetConnectionsResponse) SetConnectionList(v []Connection) {
	o.ConnectionList = v
}

// GetErrorCode returns the ErrorCode field value
func (o *GetConnectionsResponse) GetErrorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *GetConnectionsResponse) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *GetConnectionsResponse) SetErrorCode(v string) {
	o.ErrorCode = v
}

// GetMsg returns the Msg field value
func (o *GetConnectionsResponse) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *GetConnectionsResponse) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *GetConnectionsResponse) SetMsg(v string) {
	o.Msg = v
}

// GetDisplayCount returns the DisplayCount field value if set, zero value otherwise.
func (o *GetConnectionsResponse) GetDisplayCount() int32 {
	if o == nil || IsNil(o.DisplayCount) {
		var ret int32
		return ret
	}
	return *o.DisplayCount
}

// GetDisplayCountOk returns a tuple with the DisplayCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetConnectionsResponse) GetDisplayCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DisplayCount) {
		return nil, false
	}
	return o.DisplayCount, true
}

// HasDisplayCount returns a boolean if a field has been set.
func (o *GetConnectionsResponse) HasDisplayCount() bool {
	if o != nil && !IsNil(o.DisplayCount) {
		return true
	}

	return false
}

// SetDisplayCount gets a reference to the given int32 and assigns it to the DisplayCount field.
func (o *GetConnectionsResponse) SetDisplayCount(v int32) {
	o.DisplayCount = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *GetConnectionsResponse) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetConnectionsResponse) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *GetConnectionsResponse) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *GetConnectionsResponse) SetTotalCount(v int32) {
	o.TotalCount = &v
}

func (o GetConnectionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetConnectionsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ConnectionList"] = o.ConnectionList
	toSerialize["errorCode"] = o.ErrorCode
	toSerialize["msg"] = o.Msg
	if !IsNil(o.DisplayCount) {
		toSerialize["displayCount"] = o.DisplayCount
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	return toSerialize, nil
}

func (o *GetConnectionsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ConnectionList",
		"errorCode",
		"msg",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetConnectionsResponse := _GetConnectionsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetConnectionsResponse)

	if err != nil {
		return err
	}

	*o = GetConnectionsResponse(varGetConnectionsResponse)

	return err
}

type NullableGetConnectionsResponse struct {
	value *GetConnectionsResponse
	isSet bool
}

func (v NullableGetConnectionsResponse) Get() *GetConnectionsResponse {
	return v.value
}

func (v *NullableGetConnectionsResponse) Set(val *GetConnectionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetConnectionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetConnectionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetConnectionsResponse(val *GetConnectionsResponse) *NullableGetConnectionsResponse {
	return &NullableGetConnectionsResponse{value: val, isSet: true}
}

func (v NullableGetConnectionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetConnectionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


