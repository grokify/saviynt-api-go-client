/*
Saviynt Connections API

Connections

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connections

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Connection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Connection{}

// Connection struct for Connection
type Connection struct {
	CONNECTIONDESCRIPTION string `json:"CONNECTIONDESCRIPTION"`
	CONNECTIONNAME string `json:"CONNECTIONNAME"`
	CONNECTIONTYPE string `json:"CONNECTIONTYPE"`
	CREATEDBY *string `json:"CREATEDBY,omitempty"`
	CREATEDON time.Time `json:"CREATEDON"`
	STATUS float32 `json:"STATUS"`
	UPDATEDBY *string `json:"UPDATEDBY,omitempty"`
	UPDATEDON *time.Time `json:"UPDATEDON,omitempty"`
}

type _Connection Connection

// NewConnection instantiates a new Connection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnection(cONNECTIONDESCRIPTION string, cONNECTIONNAME string, cONNECTIONTYPE string, cREATEDON time.Time, sTATUS float32) *Connection {
	this := Connection{}
	this.CONNECTIONDESCRIPTION = cONNECTIONDESCRIPTION
	this.CONNECTIONNAME = cONNECTIONNAME
	this.CONNECTIONTYPE = cONNECTIONTYPE
	this.CREATEDON = cREATEDON
	this.STATUS = sTATUS
	return &this
}

// NewConnectionWithDefaults instantiates a new Connection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionWithDefaults() *Connection {
	this := Connection{}
	return &this
}

// GetCONNECTIONDESCRIPTION returns the CONNECTIONDESCRIPTION field value
func (o *Connection) GetCONNECTIONDESCRIPTION() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CONNECTIONDESCRIPTION
}

// GetCONNECTIONDESCRIPTIONOk returns a tuple with the CONNECTIONDESCRIPTION field value
// and a boolean to check if the value has been set.
func (o *Connection) GetCONNECTIONDESCRIPTIONOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CONNECTIONDESCRIPTION, true
}

// SetCONNECTIONDESCRIPTION sets field value
func (o *Connection) SetCONNECTIONDESCRIPTION(v string) {
	o.CONNECTIONDESCRIPTION = v
}

// GetCONNECTIONNAME returns the CONNECTIONNAME field value
func (o *Connection) GetCONNECTIONNAME() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CONNECTIONNAME
}

// GetCONNECTIONNAMEOk returns a tuple with the CONNECTIONNAME field value
// and a boolean to check if the value has been set.
func (o *Connection) GetCONNECTIONNAMEOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CONNECTIONNAME, true
}

// SetCONNECTIONNAME sets field value
func (o *Connection) SetCONNECTIONNAME(v string) {
	o.CONNECTIONNAME = v
}

// GetCONNECTIONTYPE returns the CONNECTIONTYPE field value
func (o *Connection) GetCONNECTIONTYPE() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CONNECTIONTYPE
}

// GetCONNECTIONTYPEOk returns a tuple with the CONNECTIONTYPE field value
// and a boolean to check if the value has been set.
func (o *Connection) GetCONNECTIONTYPEOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CONNECTIONTYPE, true
}

// SetCONNECTIONTYPE sets field value
func (o *Connection) SetCONNECTIONTYPE(v string) {
	o.CONNECTIONTYPE = v
}

// GetCREATEDBY returns the CREATEDBY field value if set, zero value otherwise.
func (o *Connection) GetCREATEDBY() string {
	if o == nil || IsNil(o.CREATEDBY) {
		var ret string
		return ret
	}
	return *o.CREATEDBY
}

// GetCREATEDBYOk returns a tuple with the CREATEDBY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetCREATEDBYOk() (*string, bool) {
	if o == nil || IsNil(o.CREATEDBY) {
		return nil, false
	}
	return o.CREATEDBY, true
}

// HasCREATEDBY returns a boolean if a field has been set.
func (o *Connection) HasCREATEDBY() bool {
	if o != nil && !IsNil(o.CREATEDBY) {
		return true
	}

	return false
}

// SetCREATEDBY gets a reference to the given string and assigns it to the CREATEDBY field.
func (o *Connection) SetCREATEDBY(v string) {
	o.CREATEDBY = &v
}

// GetCREATEDON returns the CREATEDON field value
func (o *Connection) GetCREATEDON() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CREATEDON
}

// GetCREATEDONOk returns a tuple with the CREATEDON field value
// and a boolean to check if the value has been set.
func (o *Connection) GetCREATEDONOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CREATEDON, true
}

// SetCREATEDON sets field value
func (o *Connection) SetCREATEDON(v time.Time) {
	o.CREATEDON = v
}

// GetSTATUS returns the STATUS field value
func (o *Connection) GetSTATUS() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.STATUS
}

// GetSTATUSOk returns a tuple with the STATUS field value
// and a boolean to check if the value has been set.
func (o *Connection) GetSTATUSOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.STATUS, true
}

// SetSTATUS sets field value
func (o *Connection) SetSTATUS(v float32) {
	o.STATUS = v
}

// GetUPDATEDBY returns the UPDATEDBY field value if set, zero value otherwise.
func (o *Connection) GetUPDATEDBY() string {
	if o == nil || IsNil(o.UPDATEDBY) {
		var ret string
		return ret
	}
	return *o.UPDATEDBY
}

// GetUPDATEDBYOk returns a tuple with the UPDATEDBY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetUPDATEDBYOk() (*string, bool) {
	if o == nil || IsNil(o.UPDATEDBY) {
		return nil, false
	}
	return o.UPDATEDBY, true
}

// HasUPDATEDBY returns a boolean if a field has been set.
func (o *Connection) HasUPDATEDBY() bool {
	if o != nil && !IsNil(o.UPDATEDBY) {
		return true
	}

	return false
}

// SetUPDATEDBY gets a reference to the given string and assigns it to the UPDATEDBY field.
func (o *Connection) SetUPDATEDBY(v string) {
	o.UPDATEDBY = &v
}

// GetUPDATEDON returns the UPDATEDON field value if set, zero value otherwise.
func (o *Connection) GetUPDATEDON() time.Time {
	if o == nil || IsNil(o.UPDATEDON) {
		var ret time.Time
		return ret
	}
	return *o.UPDATEDON
}

// GetUPDATEDONOk returns a tuple with the UPDATEDON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetUPDATEDONOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UPDATEDON) {
		return nil, false
	}
	return o.UPDATEDON, true
}

// HasUPDATEDON returns a boolean if a field has been set.
func (o *Connection) HasUPDATEDON() bool {
	if o != nil && !IsNil(o.UPDATEDON) {
		return true
	}

	return false
}

// SetUPDATEDON gets a reference to the given time.Time and assigns it to the UPDATEDON field.
func (o *Connection) SetUPDATEDON(v time.Time) {
	o.UPDATEDON = &v
}

func (o Connection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Connection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CONNECTIONDESCRIPTION"] = o.CONNECTIONDESCRIPTION
	toSerialize["CONNECTIONNAME"] = o.CONNECTIONNAME
	toSerialize["CONNECTIONTYPE"] = o.CONNECTIONTYPE
	if !IsNil(o.CREATEDBY) {
		toSerialize["CREATEDBY"] = o.CREATEDBY
	}
	toSerialize["CREATEDON"] = o.CREATEDON
	toSerialize["STATUS"] = o.STATUS
	if !IsNil(o.UPDATEDBY) {
		toSerialize["UPDATEDBY"] = o.UPDATEDBY
	}
	if !IsNil(o.UPDATEDON) {
		toSerialize["UPDATEDON"] = o.UPDATEDON
	}
	return toSerialize, nil
}

func (o *Connection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CONNECTIONDESCRIPTION",
		"CONNECTIONNAME",
		"CONNECTIONTYPE",
		"CREATEDON",
		"STATUS",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnection := _Connection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnection)

	if err != nil {
		return err
	}

	*o = Connection(varConnection)

	return err
}

type NullableConnection struct {
	value *Connection
	isSet bool
}

func (v NullableConnection) Get() *Connection {
	return v.value
}

func (v *NullableConnection) Set(val *Connection) {
	v.value = val
	v.isSet = true
}

func (v NullableConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnection(val *Connection) *NullableConnection {
	return &NullableConnection{value: val, isSet: true}
}

func (v NullableConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


