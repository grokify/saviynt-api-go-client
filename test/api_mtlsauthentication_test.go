/*
Saviynt mTLS Authentication API

Testing MTLSAuthenticationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_mtlsauthentication_MTLSAuthenticationAPIService(t *testing.T) {
	apiClient, _, wantTest, err := client()
	require.Nil(t, err)

	t.Run("Test MTLSAuthenticationAPIService UploadKeyStore", func(t *testing.T) {
		if !wantTest {
			t.Skip("skip test") // remove to run test
		}

		filename := "mtlsauthentication_testdata/pki_key.p12"
		filenamePassword := "12345" // #nosec G101

		f, err := os.Open(filename)
		require.Nil(t, err)
		defer f.Close()

		apiReq := apiClient.MTLSAuthenticationAPI.UploadKeyStore(context.Background())
		apiReq = apiReq.KeyStoreFile(f).KeyStorePassword(filenamePassword)
		resp, httpRes, err := apiReq.Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	keyStoreAlias := ""

	t.Run("Test MTLSAuthenticationAPIService GetKeyStoreCertificateDetails", func(t *testing.T) {
		if !wantTest {
			t.Skip("skip test") // remove to run test
		}

		apiReq := apiClient.MTLSAuthenticationAPI.GetKeyStoreCertificateDetails(context.Background())

		resp, httpRes, err := apiReq.Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, len(resp.CertificateDetails), 1)
		keyStoreAlias = *resp.CertificateDetails[0].Alias
	})

	t.Run("Test MTLSAuthenticationAPIService DeleteKeyStore", func(t *testing.T) {
		if !wantTest {
			t.Skip("skip test") // remove to run test
		}

		apiReq := apiClient.MTLSAuthenticationAPI.DeleteKeyStore(context.Background(), keyStoreAlias)

		httpRes, err := apiReq.Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
