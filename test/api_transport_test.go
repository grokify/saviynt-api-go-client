/*
Saviynt Transport API

Testing TransportAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"testing"

	saviyntapigoclient "github.com/grokify/saviynt-api-go-client"
	"github.com/grokify/saviynt-api-go-client/transport"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_transport_TransportAPIService(t *testing.T) {
	apiClient, wantTest, err := client()
	require.Nil(t, err)

	t.Run("Test TransportAPIService ExportTransportPackage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TransportAPI.ExportTransportPackage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransportAPIService ImportTransportPackage", func(t *testing.T) {
		if !wantTest {
			t.Skip("skip test") // remove to run test
		}

		req := transport.ExportTransportPackageRequest{
			Updateuser:       saviyntapigoclient.Pointer("admin"),
			Transportowner:   saviyntapigoclient.Pointer("true"),
			Transportmembers: saviyntapigoclient.Pointer("true"),
			Exportonline:     "false",
			Exportpath:       saviyntapigoclient.Pointer("/saviynt_shared/testexport/transportPackage"),
			Objectstoexport: transport.ObjectsToExport{
				SavRoles: []string{"ROLE_ADMIN"},
				EmailTemplate: []string{
					"Account Password Expiry Email",
					"Entitlement Expiry Email",
				},
			},
			Businessjustification: saviyntapigoclient.Pointer("justified..."),
		}
		apiReq := apiClient.TransportAPI.ExportTransportPackage(context.Background())
		apiReq = apiReq.ExportTransportPackageRequest(req)

		resp, httpRes, err := apiReq.Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, int32(0), resp.Errorcode)
	})

	t.Run("Test TransportAPIService TransportPackageStatus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TransportAPI.TransportPackageStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})
}
