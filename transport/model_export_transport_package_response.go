/*
Saviynt Transport API

Transporting Packages: https://docs.saviyntcloud.com/bundle/EIC-Admin-AMS/page/Content/Chapter07-General-Administrator/Transporting-Packages.htm

API version: 1.0
Contact: https://github.com/saviynt
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package transport

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExportTransportPackageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportTransportPackageResponse{}

// ExportTransportPackageResponse struct for ExportTransportPackageResponse
type ExportTransportPackageResponse struct {
	Msg string `json:"msg"`
	FileName *string `json:"fileName,omitempty"`
	MsgDescription *string `json:"msgDescription,omitempty"`
	Errorcode int32 `json:"errorcode"`
}

type _ExportTransportPackageResponse ExportTransportPackageResponse

// NewExportTransportPackageResponse instantiates a new ExportTransportPackageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportTransportPackageResponse(msg string, errorcode int32) *ExportTransportPackageResponse {
	this := ExportTransportPackageResponse{}
	this.Msg = msg
	this.Errorcode = errorcode
	return &this
}

// NewExportTransportPackageResponseWithDefaults instantiates a new ExportTransportPackageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportTransportPackageResponseWithDefaults() *ExportTransportPackageResponse {
	this := ExportTransportPackageResponse{}
	return &this
}

// GetMsg returns the Msg field value
func (o *ExportTransportPackageResponse) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *ExportTransportPackageResponse) GetMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *ExportTransportPackageResponse) SetMsg(v string) {
	o.Msg = v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *ExportTransportPackageResponse) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportTransportPackageResponse) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *ExportTransportPackageResponse) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *ExportTransportPackageResponse) SetFileName(v string) {
	o.FileName = &v
}

// GetMsgDescription returns the MsgDescription field value if set, zero value otherwise.
func (o *ExportTransportPackageResponse) GetMsgDescription() string {
	if o == nil || IsNil(o.MsgDescription) {
		var ret string
		return ret
	}
	return *o.MsgDescription
}

// GetMsgDescriptionOk returns a tuple with the MsgDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportTransportPackageResponse) GetMsgDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.MsgDescription) {
		return nil, false
	}
	return o.MsgDescription, true
}

// HasMsgDescription returns a boolean if a field has been set.
func (o *ExportTransportPackageResponse) HasMsgDescription() bool {
	if o != nil && !IsNil(o.MsgDescription) {
		return true
	}

	return false
}

// SetMsgDescription gets a reference to the given string and assigns it to the MsgDescription field.
func (o *ExportTransportPackageResponse) SetMsgDescription(v string) {
	o.MsgDescription = &v
}

// GetErrorcode returns the Errorcode field value
func (o *ExportTransportPackageResponse) GetErrorcode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Errorcode
}

// GetErrorcodeOk returns a tuple with the Errorcode field value
// and a boolean to check if the value has been set.
func (o *ExportTransportPackageResponse) GetErrorcodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Errorcode, true
}

// SetErrorcode sets field value
func (o *ExportTransportPackageResponse) SetErrorcode(v int32) {
	o.Errorcode = v
}

func (o ExportTransportPackageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportTransportPackageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["msg"] = o.Msg
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.MsgDescription) {
		toSerialize["msgDescription"] = o.MsgDescription
	}
	toSerialize["errorcode"] = o.Errorcode
	return toSerialize, nil
}

func (o *ExportTransportPackageResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"msg",
		"errorcode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExportTransportPackageResponse := _ExportTransportPackageResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExportTransportPackageResponse)

	if err != nil {
		return err
	}

	*o = ExportTransportPackageResponse(varExportTransportPackageResponse)

	return err
}

type NullableExportTransportPackageResponse struct {
	value *ExportTransportPackageResponse
	isSet bool
}

func (v NullableExportTransportPackageResponse) Get() *ExportTransportPackageResponse {
	return v.value
}

func (v *NullableExportTransportPackageResponse) Set(val *ExportTransportPackageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExportTransportPackageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExportTransportPackageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportTransportPackageResponse(val *ExportTransportPackageResponse) *NullableExportTransportPackageResponse {
	return &NullableExportTransportPackageResponse{value: val, isSet: true}
}

func (v NullableExportTransportPackageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportTransportPackageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


